---
import { twMerge } from "tailwind-merge";
import PaintingWithDetails from "./PaintingWithDetails.astro";
import type { GalleryProps } from "@interfaces/IComponentProps";
import type { ArtItem } from "@interfaces/IArt";

export type Props = GalleryProps;

const { data, className = "", showCreators = true } = Astro.props;
const dataLength = data.length;

//used where there are more than 3 artworks and want to create 3 columns for better UI
const n = 3; // number of subarrays
const partSize = Math.floor(dataLength / n); // calculate size of each part
const remainder = dataLength % n; // calculate remainder

const parts: ArtItem[][] = []; // initialize parts array

for (let i = 0, j = 0; i < n; i++) {
  const extra = i < remainder ? 1 : 0; // add 1 if remainder needs to be reduced
  const end = j + partSize + extra;

  const slice = data.slice(j, end).filter((item) => Object.keys(item.images).length > 0);

  parts.push(slice);
  j = end;
}
---

<div class={twMerge("grid grid-cols-1 md:grid-cols-3 gap-3 overflow-hidden", className)}>
  {
    dataLength > 3
      ? parts.map((column) => (
          <div class="flex flex-col">
            {column.map((item, index) => (
              <div class={`${index > 0 ? "mt-3" : ""}`}>
                <PaintingWithDetails
                  item={item}
                  resetHrefStyle
                  showValues={showCreators ?? item.creators.length > 1}
                />
              </div>
            ))}
          </div>
        ))
      : data.map((item) => (
          <div><!-- needed to prevent the flexbox from collapsing -->
            <PaintingWithDetails
              item={item}
              resetHrefStyle
              showValues={showCreators ?? item.creators.length > 1}
            />
          </div>
        ))
  }
</div>
